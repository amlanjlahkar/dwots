#!/usr/bin/env bash

# Generate unique passphrases utilizing the Diceware technique.
# (https://theworld.com/~reinhold/diceware.html)

# generate a 6 figure number
# to match against diceware words
function gen_seq() {
  dice=(1 2 3 4 5 6)
  declare -a _seq=()
  for ((i = 0; i < 5; i++)); do
    get_random="${dice[$RANDOM % ${#dice[@]}]}"
    _seq[i]="$get_random"
  done
  printf '%s' "${_seq[@]}"
}

declare pass_len
declare -a pass=()
function gen_pass() {
  # passphrase contains 6 words by default
  declare -a numarray=()
  for ((i = 0; i < "${pass_len:-6}"; i++)); do
    numarray[i]="$(gen_seq)"
  done
  # sort the generated array in order to
  # ascendingly match against the diceware list
  readarray -t numarray < <(printf '%s\n' "${numarray[@]}" | sort -n)

  diceware_list="${XDG_DATA_HOME:-$HOME/.local/share}/diceware_list.txt"
  declare -i i=0
  while IFS=' ' read -r num word; do
    if [ $i -eq "${pass_len:-6}" ]; then
      break
    elif [ "${numarray[$i]}" -eq "$num" ]; then
      pass[i]="$word"
      ((i++))
    fi
  done <"$diceware_list"

  # finally shuffle the words
  readarray -t pass < <(shuf -e "${pass[@]}")
}

function isInt() {
  pattern='^[0-9]+$'
  [[ $pass_len =~ $pattern ]] && return 0 || return 1
}

function main() {
  while :; do
    read -r -p 'Passphrase length? [default is 6] ' pass_len
    if ! isInt pass_len && [ -n "$pass_len" ]; then
      printf '%s\n' "Invalid input!"
      continue
    elif [ -n "$pass_len" ] && [ "$pass_len" -lt 6 ]; then
      printf '%s\n' "Passphrase must contain atleast 6 words!"
      continue
    fi
    # TODO: ability to use numbers inplace of whitespaces
    read -r -p 'Use space between words? [Y/n] ' sep
    case "$sep" in
      Y | Yes | y | yes)
        gen_pass pass_len
        printf '%s\n\n' "Your generated passphrase is:"
        printf '%s ' "${pass[@]}"
        printf '\n'
        ;;
      n | no | No | N)
        gen_pass pass_len
        printf '%s\n\n' "Your generated passphrase is:"
        printf '%s' "${pass[@]}"
        printf '\n'
        ;;
      *)
        printf '%s\n' "Invalid Input!"
        continue
        ;;
    esac
    exit
  done
}

main

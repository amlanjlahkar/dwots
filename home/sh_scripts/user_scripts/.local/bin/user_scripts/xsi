#!/usr/bin/env bash

# script to conveniently search and install packages
# with the x binary package system

function isVoid() {
  IFS='=' read -r _ os <<<"$(grep "^ID" /etc/os-release)"
  if [ "${os//\"/}" = 'void' ]; then
    return 0
  else
    printf '%s\n%s\n' "The script is only intended to be used with xbps." "Aborting..."
    exit 1
  fi
}

function isInt() {
  patern='^[1-9]+$'
  [[ $1 =~ $patern ]] && return 0 || return 1
}

export res="/tmp/xbps-search.info"
if isVoid; then xbps-query --repository --search "$@" >|"$res"; fi

if [ "$(wc -c $res | cut -d' ' -f1)" -eq 0 ]; then
  printf '%s\n' "No packages found!"
else
  # redirect search results to an array
  readarray -t pkgs < <(colrm 1 4 <"$res")

  # numerically index entries
  declare -a pkg_list=()
  for ((i = 0; i < "${#pkgs[@]}"; i++)); do
    pkg_list[$i]="$(printf '%3s  %s\n' "$((i + 1)))" "${pkgs[$i]}")"
  done

  # input error handling
  printf '\n'
  printf '%s\n' "${pkg_list[@]}"
  printf '\n'
  read -r -a choices -p 'Packages to install: '
  [ ${#choices[@]} -eq 0 ] && exit
  for ((i = 0; i < "${#choices[@]}"; i++)); do
    if ! isInt "${choices[$i]}" || [ "${choices[$i]}" -gt ${#pkg_list[@]} ]; then
      printf '%s\n%s\n' "Please provide a valid integer input!" "Aborting..."
      exit 1
    fi
  done

  # index matching
  declare -a pkgnames=()
  for ((i = 0, j = 0; i < ${#pkg_list[@]}; i++)); do
    if [[ "${choices[$j]}" -eq "$(printf '%s\n' "${pkg_list[$i]}" | awk -F')' '{print $1}')" ]]; then
      pkgnames[$j]="$(printf '%s\n' "${pkg_list[$i]}" | awk '{print $2}')"
      ((j++))
    else
      continue
    fi
  done

  # prompt for installation
  echo -e "Installing ${pkgnames[*]}\n"
  doas xbps-install -S "${pkgnames[@]}"
fi

#!/usr/bin/env bash

# script to provide an easy to deploy interface
# when migrating the files from my dotfiles directory dwots

pushd "$HOME/dwots_mac/home" 1>/dev/null || exit 2

# Pre-check important conditionals
if [[ "$EUID" -eq 0 ]]; then
  printf >&2 '%s\n%s\n' "Running as root is not allowed!" \
    "Aborting..."
  exit 1
fi

# Functions
checkDep() {
  [[ -z "$(command -v "$1")" ]] && return 1 || return 0
}

getChoice() {
  if ! read -t20 -r -p "$1" user_choice; then
    printf '\n%s\n' "Timeout! Aborting..."
    exit 1
  elif [[ -z "$user_choice" ]]; then
    printf '%s\n' "No input provided! Skipping..."
    return 1
  fi
  case "$user_choice" in
    n | N | no | No)
      printf '%s\n' "Skipping..." && return 1
      ;;
    y | Y | yes | Yes)
      return 0
      ;;
    *)
      printf >&2 '%s\n' "Invalid input! Skipping..." && return 1
      ;;
  esac
}

stowDir() {
  printf '\n%s\n' "The $1 directory contains the package directory for ${2}."
  if getChoice "Do you want to link it? [Y/n] "; then
    printf '%s\n' "Linking files for ${2}..."
    stow --restow --dir="${1}" --target="$HOME" --verbose "${2}"
  fi
}

stowMultiDirs() {
  usr_arr=("${!2}")
  # check whether the second argument is 'a(all)' or 'n(none)'
  if [[ "${#usr_arr[@]}" -eq 1 && "${usr_arr[*]}" = 'n' ]]; then
    printf '%s\n' "Skipping..."
    return 1
  elif [[ "${#usr_arr[@]}" -eq 1 && "${usr_arr[*]}" = 'a' ]]; then
    if getChoice "Do you want to link all directories under ${1}? [Y/n] "; then
      printf '%s\n' "Linking directories..."
      declare -a dirs=()
      getDirs "$1" dirs 0
      for ((i = 0; i < "${#dirs[@]}"; i++)); do
        stow --restow --dir="$1" --target="$HOME" --verbose "${dirs[$i]}"
      done
    fi
  fi
  declare -a sub_pkg_dirs=()
  # store indexed directory names under $1 inside $sub_pkg_dirs
  getDirs "$1" sub_pkg_dirs 1
  # compare indexes from usr_arr with indexes from sub_pkg_dir
  # and link the successive dirs if they match
  for dir in "${sub_pkg_dirs[@]}"; do
    for index in "${usr_arr[@]}"; do
      if [[ $index -eq ${dir::1} ]]; then
        printf '%s\n' "Linking files for ${dir:2}..."
        stow --restow --dir="${1}" --target="$HOME" --verbose "${dir:2}"
      else
        continue
      fi
    done
  done
}

getDirs() {
  declare -n dir_list="$2"
  declare -i i=0
  for dir in ./"${1}"/*; do
    for (( ; i < "$(find ./"${1}"/ -mindepth 1 -maxdepth 1 -type d | wc -l)"; i++)); do
      [ -d "$dir" ] || continue
      if [ "$3" -eq 1 ]; then
        dir_list[i]="$(printf '%d %s\n' "$((i + 1))" "${dir#\./*/}")"
      else
        # shellcheck disable=2034
        dir_list[i]="$(printf '%s\n' "${dir#\./*/}")"
      fi
      i+=1
      break
    done
  done
}

cmprArrs() {
  chosen_pkg_index=("${!1}")
  pkg_index=("${!2}")
  for ((i = 0; i < "${#chosen_pkg_index[@]}"; i++)); do
    if [[ "${chosen_pkg_index[i]}" = '0' ||
      "${chosen_pkg_index[i]}" -gt "${#pkg_index[@]}" ]]; then
      printf >&2 '%s\n' "Invalid input! Skipping..."
      return 1
    else
      continue
    fi
  done
}

# link configuration files
if ! checkDep stow; then
  printf >&2 '%s\n%s\n' "GNU stow is missing from PATH!" \
    "Install stow to continue the process. Aborting..."
  exit 1
fi

declare -a pkg_groups=()
declare -i i=0
for dir in ~/dwots_mac/home/*/; do
  [[ -d "$dir" ]] || continue
  pkg_groups[i++]="$(basename "$dir")"
done

# Check for flags
help() { printf '%s\n' "Usage: $0 [ -U(nstow all) ] [ -d(elete) PACKAGE ] [ -s(tow) PACKAGE ]" && exit; }
while getopts ":Ud:s:" opts; do
  case "$opts" in
    'U')
      if getChoice "Delete symbolic links for all sources under dwots_mac/home/ directory? [y/N] "; then
        printf '%s\n' "Removing symlimks..."
        for group in "${pkg_groups[@]}"; do
          if [[ "$group" = 'X11' || "$group" = user-dirs.dirs ]]; then
            stow --delete --verbose --target="$HOME" -- */
          else
            declare -a group_childs=()
            declare -i j=0
            for child_dir in "${group}"/*/; do
              [[ -d "$child_dir" ]] || continue
              group_childs[j++]="$(basename "$child_dir")"
            done
            for ((k = 0; k < "${#group_childs[@]}"; k++)); do
              stow --dir="$group" --target="$HOME" --delete --verbose "${group_childs[$k]}"
            done
          fi
        done
        printf '%s\n' "Done!"
        exit
      else
        exit 1
      fi
      ;;
    d)
      pushd "$HOME"/dwots_mac/home 1>/dev/null || exit
      IFS='/' read -r _ group pkg < <(find . -maxdepth 2 -type d -iname "$2")
      if [ -z "$2" ]; then
        help
        exit 1
      elif [ -z "$group" ]; then
        printf >&2 '%s\n' "Group containing package '$2' doesn't exist!"
        exit 1
      else
        stow --dir="$group" --target="$HOME" --delete --verbose "$pkg"
      fi
      popd 1>/dev/null || exit
      exit
      ;;
    s)
      pushd "$HOME"/dwots_mac/home 1>/dev/null || exit
      IFS='/' read -r _ group pkg < <(find . -maxdepth 2 -type d -iname "$2")
      if [ -z "$2" ]; then
        help
        exit 1
      elif [ -z "$group" ]; then
        printf >&2 '%s\n' "Group containing package '$2' doesn't exist!"
        exit 1
      else
        stow --restow --dir="$group" --target="$HOME" --verbose "$pkg"
      fi
      popd 1>/dev/null || exit
      exit
      ;;
    :)
      printf >&2 '%s\n' "$0: option -$OPTARG requires a pkgname as value"
      exit
      ;;
    \?)
      printf >&2 '%s\n' "$0: invalid option -$OPTARG"
      help
      exit
      ;;
  esac
done

printf '\n%s\n%s\n' "Preparing to link configuration files..." \
  "======================"
for group in "${pkg_groups[@]}"; do
  [[ ! -d "$group" || "$group" = 'pkg_lists' ]] && continue

  # don't take user input for these
  if [[ "$group" = 'X11' || "$group" = 'xdg-user-dirs' ]]; then
    printf '\n%s\n' "Linking \"$group\" conf files..."
    stow --restow --verbose --target="$HOME" "$group"
    [[ "$group" = 'X11' ]] && printf '%s\n' \
      "(make sure the startup programs specified in xinitrc are installed on the system!)"
  # if the group contains only one pkg_dir
  elif [[ "$(find ./"${group}"/ -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ]]; then
    pkg_dir="$(basename "$group"/*/)"
    stowDir "$group" "$pkg_dir"
  else
    # if the group contains multiple pkg_dirs
    # $pkg_dirs is used for holding the name of the dirs with indexing
    declare -a pkg_dirs=()
    getDirs "$group" pkg_dirs 1
    printf '\n%s\n' "The \"${group}\" directory contains the following package directories: "
    printf '\t%s\n' "${pkg_dirs[@]}"

    if ! read -t20 -r -p "Indexes of the directories to link (or a for all, n for none): " -a chosen_pkgs; then
      printf '\n%s\n' "Timeout! Aborting..."
      exit 1
    elif [[ "${#chosen_pkgs[@]}" -eq 0 ]]; then
      printf '%s\n' "No input provided! Skipping..."
      continue
    fi
    # check for non-valid inputs
    cmprArrs chosen_pkgs[@] pkg_dirs[@]
    [[ $? -eq 2 ]] && continue

    stowMultiDirs "$group" chosen_pkgs[@]
    # resetting $pkg_dir is necessary,
    # otherwise it'll continue to hold elements from the preceding getDirs() call
    unset pkg_dirs
  fi
done

printf '\n\n%s\n%s\n%s\n%s\n\n' "The installation routine has ended successfully." \
  "Verify whether the configuration files have been symlinked properly or not" \
  "with \`ls -l ~/.config\`" \
  "==============================================="

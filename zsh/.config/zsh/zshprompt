#!/bin/sh

autoload -U colors && colors
autoload -Uz vcs_info # enable vcs_info

precmd() { vcs_info } # always load before rendering the prompt
setopt prompt_subst

# hooks for compare local git changes to remote chnages
# and showing a marker for untracked files in a local git respository.
# for more info: https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-st

function +vi-git-untracked() {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep -q '^?? ' 2> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[staged]+='?'
    fi
}

function +vi-git-st() {
    local ahead behind
    local -a gitstatus

    # Exit early in case the worktree is on a detached HEAD
    git rev-parse ${hook_com[branch]}@{upstream} >/dev/null 2>&1 || return 0

    local -a ahead_and_behind=(
        $(git rev-list --left-right --count HEAD...${hook_com[branch]}@{upstream} 2>/dev/null)
    )

    ahead=${ahead_and_behind[1]}
    behind=${ahead_and_behind[2]}

    (( $ahead )) && gitstatus+=( "â†‘${ahead}" )
    (( $behind )) && gitstatus+=( "â†“${behind}" )

    hook_com[misc]+=${(j:/:)gitstatus}
}

# for debugging vcs hooks
#zstyle ':vcs_info:*+*:*' debug true
zstyle ':vcs_info:git*' formats "%F{250}â€¢%f ðŸŒ´ [%F{11}%b%f](%F{9}%c%f%F{13}%m%f) "

NEWLINE=$'\n'
PROMPT='%F{14}%n%f in %F{4}%3~%f ${vcs_info_msg_0_}%F{250}â€¢%f %F{244}%t%f${NEWLINE}%(!.#.%(?:%{$fg[green]%}>>:%{$fg[red]%}>>)) '

